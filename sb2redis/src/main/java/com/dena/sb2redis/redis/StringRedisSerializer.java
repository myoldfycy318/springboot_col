package com.dena.sb2redis.redis;import com.alibaba.fastjson.JSON;import org.springframework.data.redis.serializer.RedisSerializer;import org.springframework.lang.Nullable;import org.springframework.util.Assert;import java.nio.charset.Charset;import java.nio.charset.StandardCharsets;/** * StringRedisSerializer * * @author shanmin.zhang * @date 19/1/23 **/public class StringRedisSerializer implements RedisSerializer<Object> {    private final Charset charset;    private final String target = "\"";    private final String replacement = "";    /**     * {@link org.springframework.data.redis.serializer.StringRedisSerializer} to use 8 bit UCS Transformation Format.     *     * @see StandardCharsets#UTF_8     * @since 2.1     */    public static final org.springframework.data.redis.serializer.StringRedisSerializer UTF_8 = new org.springframework.data.redis.serializer.StringRedisSerializer(StandardCharsets.UTF_8);    /**     * Creates a new {@link org.springframework.data.redis.serializer.StringRedisSerializer} using {@link StandardCharsets#UTF_8 UTF-8}.     */    public StringRedisSerializer() {        this(StandardCharsets.UTF_8);    }    /**     * Creates a new {@link org.springframework.data.redis.serializer.StringRedisSerializer} using the given {@link Charset} to encode and decode strings.     *     * @param charset must not be {@literal null}.     */    public StringRedisSerializer(Charset charset) {        Assert.notNull(charset, "Charset must not be null!");        this.charset = charset;    }    @Override    public String deserialize(@Nullable byte[] bytes) {        return (bytes == null ? null : new String(bytes, charset));    }    @Override    public byte[] serialize(@Nullable Object object) {        String string = JSON.toJSONString(object);        if (string == null) {            return null;        }        string = string.replace(target, replacement);        return string.getBytes(charset);    }}