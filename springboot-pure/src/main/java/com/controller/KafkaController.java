package com.controller;import com.alibaba.fastjson.JSONObject;import com.amazonaws.util.json.Jackson;import lombok.extern.slf4j.Slf4j;import org.apache.kafka.clients.producer.ProducerRecord;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.kafka.core.KafkaTemplate;import org.springframework.kafka.support.SendResult;import org.springframework.util.concurrent.ListenableFuture;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.UUID;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;/** * KafkaController * * @author shanmin.zhang * @date 19/1/21 **/@Slf4j@RestControllerpublic class KafkaController {    @Autowired    private KafkaTemplate<String, String> kafkaTemplate;    @RequestMapping("/send")    public String send(String name) {        kafkaTemplate.send("mask-word-topic", UUID.randomUUID().toString());        return name;    }    @RequestMapping("/send2")    public String send2(String name) {        kafkaTemplate.send("mask-word-topic", "change");        String key = "k1";        String value = "xxx===";        ListenableFuture<SendResult<String, String>> sendResult = kafkaTemplate.send("mask-word-topic",value);        try {            SendResult<String, String> sr =  sendResult.get(1L, TimeUnit.MINUTES);          log.error(JSONObject.toJSONString(sr.getProducerRecord()));        } catch (InterruptedException e) {            e.printStackTrace();        } catch (ExecutionException e) {            e.printStackTrace();        } catch (TimeoutException e) {            e.printStackTrace();        }        return name;    }}