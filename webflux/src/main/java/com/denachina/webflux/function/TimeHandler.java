package com.denachina.webflux.function;import org.joda.time.DateTime;import org.springframework.http.MediaType;import org.springframework.http.codec.ServerSentEvent;import org.springframework.stereotype.Component;import org.springframework.web.reactive.function.server.ServerRequest;import org.springframework.web.reactive.function.server.ServerResponse;import reactor.core.publisher.Flux;import reactor.core.publisher.Mono;import java.time.Duration;import java.util.concurrent.ThreadLocalRandom;/** * TimeHandler * 创建统一存放处理时间的Handler类 * * @author shanmin.zhang * @date 18/12/6 **/@Componentpublic class TimeHandler {    public Mono<ServerResponse> getTime(ServerRequest serverRequest) {        return ServerResponse.ok().contentType(MediaType.TEXT_PLAIN)                .body(Mono.just(new DateTime().toString("HH:mm:ss")), String.class);    }    public Mono<ServerResponse> getDate(ServerRequest serverRequest) {        return ServerResponse.ok().contentType(MediaType.TEXT_PLAIN)                .body(Mono.just(new DateTime().toString("yyyy-MM-dd")), String.class);    }    /**     * MediaType.TEXT_EVENT_STREAM表示Content-Type为text/event-stream，即SSE；     * 利用interval生成每秒一个数据的流。     *     * @return     */    public Mono<ServerResponse> sendTimePerSec(ServerRequest serverRequest) {        return ServerResponse.ok().contentType(MediaType.TEXT_EVENT_STREAM)                .body(Flux.interval(Duration.ofSeconds(1L))                        .map(i -> new DateTime().toString("yyyy-MM-dd HH:mm:ss")), String.class);    }    public Mono<ServerResponse> sendRandomPerSec(ServerRequest request) {        return ServerResponse.ok().contentType(MediaType.TEXT_EVENT_STREAM)                .body(Flux.interval(Duration.ofSeconds(1))                                .map(i -> ServerSentEvent.<Integer>builder()                                        .id(i.toString())                                        .event("server send event")                                        .data(ThreadLocalRandom.current().nextInt())                                        .build())                        , ServerSentEvent.class);    }}